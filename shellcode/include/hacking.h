#ifndef NET_HACKING
#define NET_HACKING

void dump(const unsigned char *data_buffer, const unsigned int length) {
    unsigned char byte;
    unsigned int i, j;

    for (i = 0; i < length; i++) {
        byte = data_buffer[i];
        printf("%02x ", data_buffer[i]);
        if (((i % 16) == 15) || (i == length - 1)) {
            for (j = 0; j < 15-(i%16); j++) {
                printf("   ");
            }
            printf("| ");
            for (j = (i - (i % 16)); j <= i; j++) {
                byte = data_buffer[j];
                if ((byte > 31) && (byte < 127)) {
                    printf("%c", byte);
                } else {
                    printf(".");
                }
            }
            printf("\n");
        }
    }
}

void hacking_fatal(const char *failed_in, const char *errbuf) {
    printf("FATAL ERROR in %s: %s\n", failed_in, errbuf);
    exit(EXIT_FAILURE);
}


void fatal(char *msg) {
    char error_msg[100];

    strcpy(error_msg, "[!!] Fatal Error ");
    strncat(error_msg, msg, 83);
    perror(error_msg);
    exit(EXIT_FAILURE);
}

void *ec_malloc(unsigned int size) {
    void *ptr;
    ptr = malloc(size);
    if (ptr == NULL) {
        fatal("ec_malloc() fail.\n");
    }
    return ptr;
}

#endif